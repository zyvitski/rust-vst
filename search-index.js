var searchIndex = {};
searchIndex["vst2"] = {"doc":"rust-vst2 is a rust implementation of the VST2.4 API","items":[[0,"buffer","vst2","Buffers to safely work with audio samples.",null,null],[3,"AudioBuffer","vst2::buffer","AudioBuffer contains references to the audio buffers for all input and output channels",null,null],[3,"Inputs","","Wrapper type to access the buffers for the input channels of an AudioBuffer in a safe way. Behaves like a slice.",null,null],[3,"InputIterator","","Iterator over buffers for input channels of an AudioBuffer.",null,null],[3,"Outputs","","Wrapper type to access the buffers for the output channels of an AudioBuffer in a safe way. Behaves like a slice.",null,null],[3,"OutputIterator","","Iterator over buffers for output channels of an AudioBuffer.",null,null],[3,"SendEventBuffer","","This buffer is used for sending midi events through the VST interface. The purpose of this is to convert outgoing midi events from event::Event to api::Events. It only allocates memory in new() and reuses the memory between calls.",null,null],[11,"new","","Create an `AudioBuffer` from slices of raw pointers. Useful in a Rust VST host.",0,null],[11,"from_raw","","Create an `AudioBuffer` from raw pointers. Only really useful for interacting with the VST API.",0,null],[11,"input_count","","The number of input channels that this buffer was created for",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"output_count","","The number of output channels that this buffer was created for",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"samples","","The number of samples in this buffer (same for all channels)",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split","","Split this buffer into separate inputs and outputs.",0,null],[11,"zip","","Zip together buffers.",0,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"inputs"}}],[11,"len","","Number of channels",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Access channel at the given index, unchecked",1,null],[11,"split_at","","Split borrowing at the given index, like for slices",1,null],[11,"index","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",1,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"outputs"}}],[11,"len","","Number of channels",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Access channel at the given index, unchecked",3,null],[11,"get_mut","","Mutably access channel at the given index, unchecked",3,null],[11,"split_at_mut","","Split borrowing at the given index, like for slices",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",3,null],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a buffer for sending up to the given number of midi events per frame",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"store","","Use this for sending events to a host or plugin.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"store_midi","","Use this for sending midi events to a host or plugin. Like store() but for when you're not sending any SysExEvents, only MidiEvents.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"events","","Use this for sending midi events to a host or plugin. See `store()`",5,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[0,"api","vst2","Structures and types for interfacing with the VST 2.4 API.",null,null],[3,"AEffect","vst2::api","Used with the VST API to pass around plugin information.",null,null],[12,"magic","","Magic number. Must be `['V', 'S', 'T', 'P']`.",6,null],[12,"dispatcher","","Host to plug-in dispatcher.",6,null],[12,"_process","","Accumulating process mode is deprecated in VST 2.4! Use `processReplacing` instead!",6,null],[12,"setParameter","","Set value of automatable parameter.",6,null],[12,"getParameter","","Get value of automatable parameter.",6,null],[12,"numPrograms","","Number of programs (Presets).",6,null],[12,"numParams","","Number of parameters. All programs are assumed to have this many parameters.",6,null],[12,"numInputs","","Number of audio inputs.",6,null],[12,"numOutputs","","Number of audio outputs.",6,null],[12,"flags","","Bitmask made of values from api::flags.",6,null],[12,"reserved1","","Reserved for host, must be 0.",6,null],[12,"reserved2","","Reserved for host, must be 0.",6,null],[12,"initialDelay","","For algorithms which need input in the first place (Group delay or latency in samples).",6,null],[12,"_realQualities","","Deprecated unused member.",6,null],[12,"_offQualities","","Deprecated unused member.",6,null],[12,"_ioRatio","","Deprecated unused member.",6,null],[12,"object","","Void pointer usable by api to store object data.",6,null],[12,"user","","User defined pointer.",6,null],[12,"uniqueId","","Registered unique identifier (register it at Steinberg 3rd party support Web). This is used to identify a plug-in during save+load of preset and project.",6,null],[12,"version","","Plug-in version (e.g. 1100 for v1.1.0.0).",6,null],[12,"processReplacing","","Process audio samples in replacing mode.",6,null],[12,"processReplacingF64","","Process double-precision audio samples in replacing mode.",6,null],[12,"future","","Reserved for future use (please zero).",6,null],[3,"ChannelProperties","","Information about a channel. Only some hosts use this information.",null,null],[12,"name","","Channel name.",7,null],[12,"flags","","Flags found in `channel_flags` module.",7,null],[12,"arrangement_type","","Type of speaker arrangement this channel is a part of.",7,null],[12,"short_name","","Name of channel (recommended: 6 characters + delimiter).",7,null],[12,"future","","Reserved for future use.",7,null],[3,"FileType","","File type descriptor.",null,null],[12,"name","","Display name of file type.",8,null],[12,"osx_type","","OS X file type.",8,null],[12,"win_type","","Windows file type.",8,null],[12,"nix_type","","Unix file type.",8,null],[12,"mime_type_1","","MIME type.",8,null],[12,"mime_type_2","","Additional MIME type.",8,null],[3,"FileSelect","","File selector descriptor used in `host::OpCode::OpenFileSelector`.",null,null],[12,"command","","The type of file selection to perform.",9,null],[12,"select_type","","The file selector to open.",9,null],[12,"mac_creator","","Unknown. 0 = no creator.",9,null],[12,"num_types","","Number of file types.",9,null],[12,"file_types","","List of file types to show.",9,null],[12,"title","","File selector's title.",9,null],[12,"initial_path","","Initial path.",9,null],[12,"return_path","","Used when operation returns a single path.",9,null],[12,"size_return_path","","Size of the path buffer in bytes.",9,null],[12,"return_multiple_paths","","Used when operation returns multiple paths.",9,null],[12,"num_paths","","Number of paths returned.",9,null],[12,"reserved","","Reserved by host.",9,null],[12,"future","","Reserved for future use.",9,null],[3,"Events","","A struct which contains events.",null,null],[12,"num_events","","Number of events.",10,null],[12,"_reserved","","Reserved for future use. Should be 0.",10,null],[12,"events","","Variable-length array of pointers to `api::Event` objects.",10,null],[3,"EventIterator","","An iterator over events, returned by `api::Events::events`",null,null],[3,"Event","","A VST event intended to be casted to a corresponding type.",null,null],[12,"event_type","","The type of event. This lets you know which event this object should be casted to.",11,null],[12,"byte_size","","Size of this structure; `mem::sizeof::<Event>()`.",11,null],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",11,null],[12,"_flags","","Generic flags, none defined in VST api yet.",11,null],[12,"_reserved","","The `Event` type is cast appropriately, so this acts as reserved space.",11,null],[3,"MidiEvent","","A midi event.",null,null],[12,"event_type","","Should be `EventType::Midi`.",12,null],[12,"byte_size","","Size of this structure; `mem::sizeof::<MidiEvent>()`.",12,null],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",12,null],[12,"flags","","See `flags::MidiFlags`.",12,null],[12,"note_length","","Length in sample frames of entire note if available, otherwise 0.",12,null],[12,"note_offset","","Offset in samples into note from start if available, otherwise 0.",12,null],[12,"midi_data","","1 to 3 midi bytes. TODO: Doc",12,null],[12,"_midi_reserved","","Reserved midi byte (0).",12,null],[12,"detune","","Detuning between -63 and +64 cents, for scales other than 'well-tempered'. e.g. 'microtuning'",12,null],[12,"note_off_velocity","","Note off velocity between 0 and 127.",12,null],[12,"_reserved1","","Reserved for future use. Should be 0.",12,null],[12,"_reserved2","","Reserved for future use. Should be 0.",12,null],[3,"SysExEvent","","A midi system exclusive event.",null,null],[12,"event_type","","Should be `EventType::SysEx`.",13,null],[12,"byte_size","","Size of this structure; `mem::sizeof::<SysExEvent>()`.",13,null],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",13,null],[12,"_flags","","Generic flags, none defined in VST api yet.",13,null],[12,"data_size","","Size of payload in bytes.",13,null],[12,"_reserved1","","Reserved for future use. Should be 0.",13,null],[12,"system_data","","Pointer to payload.",13,null],[12,"_reserved2","","Reserved for future use. Should be 0.",13,null],[4,"SpeakerArrangementType","","Tells the host how the channels are intended to be used in the plugin. Only useful for some hosts.",null,null],[13,"Custom","","User defined arrangement.",14,null],[13,"Empty","","Empty arrangement.",14,null],[13,"Mono","","Mono.",14,null],[13,"Stereo","","L R",14,null],[13,"StereoSurround","","Ls Rs",14,null],[13,"StereoCenter","","Lc Rc",14,null],[13,"StereoSide","","Sl Sr",14,null],[13,"StereoCLfe","","C Lfe",14,null],[13,"Cinema30","","L R C",14,null],[13,"Music30","","L R S",14,null],[13,"Cinema31","","L R C Lfe",14,null],[13,"Music31","","L R Lfe S",14,null],[13,"Cinema40","","L R C S (LCRS)",14,null],[13,"Music40","","L R Ls Rs (Quadro)",14,null],[13,"Cinema41","","L R C Lfe S (LCRS + Lfe)",14,null],[13,"Music41","","L R Lfe Ls Rs (Quadro + Lfe)",14,null],[13,"Surround50","","L R C Ls Rs",14,null],[13,"Surround51","","L R C Lfe Ls Rs",14,null],[13,"Cinema60","","L R C Ls  Rs Cs",14,null],[13,"Music60","","L R Ls Rs  Sl Sr",14,null],[13,"Cinema61","","L R C Lfe Ls Rs Cs",14,null],[13,"Music61","","L R Lfe Ls Rs Sl Sr",14,null],[13,"Cinema70","","L R C Ls Rs Lc Rc",14,null],[13,"Music70","","L R C Ls Rs Sl Sr",14,null],[13,"Cinema71","","L R C Lfe Ls Rs Lc Rc",14,null],[13,"Music71","","L R C Lfe Ls Rs Sl Sr",14,null],[13,"Cinema80","","L R C Ls Rs Lc Rc Cs",14,null],[13,"Music80","","L R C Ls Rs Cs Sl Sr",14,null],[13,"Cinema81","","L R C Lfe Ls Rs Lc Rc Cs",14,null],[13,"Music81","","L R C Lfe Ls Rs Cs Sl Sr",14,null],[13,"Surround102","","L R C Lfe Ls Rs Tfl Tfc Tfr Trl Trr Lfe2",14,null],[4,"Supported","","Used to specify whether functionality is supported.",null,null],[13,"Yes","","",15,null],[13,"Maybe","","",15,null],[13,"No","","",15,null],[4,"ProcessLevel","","Denotes in which thread the host is in.",null,null],[13,"Unknown","","Unsupported by host.",16,null],[13,"User","","GUI thread.",16,null],[13,"Realtime","","Audio process thread.",16,null],[13,"Prefetch","","Sequence thread (MIDI, etc).",16,null],[13,"Offline","","Offline processing thread (therefore GUI/user thread).",16,null],[4,"HostLanguage","","Language that the host is using.",null,null],[13,"English","","",17,null],[13,"German","","",17,null],[13,"French","","",17,null],[13,"Italian","","",17,null],[13,"Spanish","","",17,null],[13,"Japanese","","",17,null],[4,"FileSelectCommand","","The file operation to perform.",null,null],[13,"Load","","Load a file.",18,null],[13,"Save","","Save a file.",18,null],[13,"LoadMultipleFiles","","Load multiple files simultaneously.",18,null],[13,"SelectDirectory","","Choose a directory.",18,null],[4,"FileSelectType","","Format to select files.",null,null],[13,"Regular","","Regular file selector.",19,null],[4,"EventType","","The type of event that has occured. See `api::Event.event_type`.",null,null],[13,"Midi","","Midi event. See `api::MidiEvent`.",20,null],[13,"_Audio","","Deprecated.",20,null],[13,"_Video","","Deprecated.",20,null],[13,"_Parameter","","Deprecated.",20,null],[13,"_Trigger","","Deprecated.",20,null],[13,"SysEx","","System exclusive event. See `api::SysExEvent`.",20,null],[0,"consts","","Constant values",null,null],[17,"MAX_PRESET_NAME_LEN","vst2::api::consts","",null,null],[17,"MAX_PARAM_STR_LEN","","",null,null],[17,"MAX_LABEL","","",null,null],[17,"MAX_SHORT_LABEL","","",null,null],[17,"MAX_PRODUCT_STR_LEN","","",null,null],[17,"MAX_VENDOR_STR_LEN","","",null,null],[17,"VST_MAGIC","","VST plugins are identified by a magic number. This corresponds to 0x56737450.",null,null],[0,"flags","vst2::api","Bitflags.",null,null],[3,"Channel","vst2::api::flags","Flags for VST channels.",null,null],[3,"Plugin","","Flags for VST plugins.",null,null],[3,"ModifierKey","","Cross platform modifier key flags.",null,null],[3,"MidiEvent","","MIDI event flags.",null,null],[17,"ACTIVE","","Indicates channel is active. Ignored by host.",null,null],[17,"STEREO","","Indicates channel is first of stereo pair.",null,null],[17,"SPEAKER","","Use channel's specified speaker_arrangement instead of stereo flag.",null,null],[17,"HAS_EDITOR","","Plugin has an editor.",null,null],[17,"CAN_REPLACING","","Plugin can process 32 bit audio. (Mandatory in VST 2.4).",null,null],[17,"PROGRAM_CHUNKS","","Plugin preset data is handled in formatless chunks.",null,null],[17,"IS_SYNTH","","Plugin is a synth.",null,null],[17,"NO_SOUND_IN_STOP","","Plugin does not produce sound when all input is silence.",null,null],[17,"CAN_DOUBLE_REPLACING","","Supports 64 bit audio processing.",null,null],[17,"SHIFT","","Shift key.",null,null],[17,"ALT","","Alt key.",null,null],[17,"COMMAND","","Control on mac.",null,null],[17,"CONTROL","","Command on mac, ctrl on other.",null,null],[17,"REALTIME_EVENT","","This event is played live (not in playback from a sequencer track). This allows the plugin to handle these flagged events with higher priority, especially when the plugin has a big latency as per `plugin::Info::initial_delay`.",null,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"channel"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"ordering"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",21,{"inputs":[],"output":{"name":"channel"}}],[11,"all","","Returns the set containing all flags.",21,{"inputs":[],"output":{"name":"channel"}}],[11,"bits","","Returns the raw value of the flags currently stored.",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",21,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",21,{"inputs":[{"name":"i32"}],"output":{"name":"channel"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",21,{"inputs":[{"name":"self"},{"name":"channel"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"channel"}}],[11,"bitor_assign","","Adds the set of flags.",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"channel"}}],[11,"bitxor_assign","","Toggles the set of flags.",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"channel"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"channel"}}],[11,"sub_assign","","Disables all flags enabled in the set.",21,{"inputs":[{"name":"self"},{"name":"channel"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",21,{"inputs":[{"name":"self"}],"output":{"name":"channel"}}],[11,"extend","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",21,{"inputs":[{"name":"t"}],"output":{"name":"channel"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"plugin"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"name":"ordering"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",22,{"inputs":[],"output":{"name":"plugin"}}],[11,"all","","Returns the set containing all flags.",22,{"inputs":[],"output":{"name":"plugin"}}],[11,"bits","","Returns the raw value of the flags currently stored.",22,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",22,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",22,{"inputs":[{"name":"i32"}],"output":{"name":"plugin"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",22,{"inputs":[{"name":"self"},{"name":"plugin"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"name":"plugin"}}],[11,"bitor_assign","","Adds the set of flags.",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"name":"plugin"}}],[11,"bitxor_assign","","Toggles the set of flags.",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"name":"plugin"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"name":"plugin"}}],[11,"sub_assign","","Disables all flags enabled in the set.",22,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",22,{"inputs":[{"name":"self"}],"output":{"name":"plugin"}}],[11,"extend","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",22,{"inputs":[{"name":"t"}],"output":{"name":"plugin"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"cmp","","",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"ordering"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",23,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",23,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",23,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",23,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",23,{"inputs":[{"name":"u8"}],"output":{"name":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",23,{"inputs":[{"name":"self"},{"name":"modifierkey"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitor_assign","","Adds the set of flags.",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitxor_assign","","Toggles the set of flags.",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"sub_assign","","Disables all flags enabled in the set.",23,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",23,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"extend","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",23,{"inputs":[{"name":"t"}],"output":{"name":"modifierkey"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"midievent"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":{"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":{"name":"bool"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":{"name":"ordering"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",24,{"inputs":[],"output":{"name":"midievent"}}],[11,"all","","Returns the set containing all flags.",24,{"inputs":[],"output":{"name":"midievent"}}],[11,"bits","","Returns the raw value of the flags currently stored.",24,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",24,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",24,{"inputs":[{"name":"i32"}],"output":{"name":"midievent"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",24,{"inputs":[{"name":"self"},{"name":"midievent"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":{"name":"midievent"}}],[11,"bitor_assign","","Adds the set of flags.",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":{"name":"midievent"}}],[11,"bitxor_assign","","Toggles the set of flags.",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":{"name":"midievent"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":{"name":"midievent"}}],[11,"sub_assign","","Disables all flags enabled in the set.",24,{"inputs":[{"name":"self"},{"name":"midievent"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",24,{"inputs":[{"name":"self"}],"output":{"name":"midievent"}}],[11,"extend","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",24,{"inputs":[{"name":"t"}],"output":{"name":"midievent"}}],[6,"PluginMain","vst2::api","`VSTPluginMain` function signature.",null,null],[6,"HostCallbackProc","","Host callback function passed to plugin. Can be used to query host information from plugin side.",null,null],[6,"DispatcherProc","","Dispatcher function used to process opcodes. Called by host.",null,null],[6,"ProcessProc","","Process function used to process 32 bit floating point samples. Called by host.",null,null],[6,"ProcessProcF64","","Process function used to process 64 bit floating point samples. Called by host.",null,null],[6,"SetParameterProc","","Callback function used to set parameter values. Called by host.",null,null],[6,"GetParameterProc","","Callback function used to get parameter values. Called by host.",null,null],[11,"get_plugin","","Return handle to Plugin object. Only works for plugins created using this library.",6,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"drop_plugin","","Drop the Plugin object. Only works for plugins created using this library.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"speakerarrangementtype"}}],[11,"from","","Create a `Supported` value from an integer if possible.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"into","","Convert to integer ordinal for interop with VST api.",15,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"events","","Use this in your impl of process_events() to process the incoming midi events.",10,{"inputs":[{"name":"self"}],"output":{"name":"eventiterator"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"eventtype"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"sysexevent"}}],[0,"editor","vst2","All VST plugin editor related functionality.",null,null],[3,"KeyCode","vst2::editor","A platform independent key code. Includes modifier keys.",null,null],[12,"character","","ASCII character for key pressed (if applicable).",26,null],[12,"key","","Key pressed. See `enums::Key`.",26,null],[12,"modifier","","Modifier key bitflags. See `enums::flags::modifier_key`.",26,null],[4,"KnobMode","","Allows host to set how a parameter knob works.",null,null],[13,"Circular","","",27,null],[13,"CircularRelative","","",27,null],[13,"Linear","","",27,null],[4,"Key","","Platform independent key codes.",null,null],[13,"Back","","",28,null],[13,"Tab","","",28,null],[13,"Clear","","",28,null],[13,"Return","","",28,null],[13,"Pause","","",28,null],[13,"Escape","","",28,null],[13,"Space","","",28,null],[13,"Next","","",28,null],[13,"End","","",28,null],[13,"Home","","",28,null],[13,"Left","","",28,null],[13,"Up","","",28,null],[13,"Right","","",28,null],[13,"Down","","",28,null],[13,"PageUp","","",28,null],[13,"PageDown","","",28,null],[13,"Select","","",28,null],[13,"Print","","",28,null],[13,"Enter","","",28,null],[13,"Snapshot","","",28,null],[13,"Insert","","",28,null],[13,"Delete","","",28,null],[13,"Help","","",28,null],[13,"Numpad0","","",28,null],[13,"Numpad1","","",28,null],[13,"Numpad2","","",28,null],[13,"Numpad3","","",28,null],[13,"Numpad4","","",28,null],[13,"Numpad5","","",28,null],[13,"Numpad6","","",28,null],[13,"Numpad7","","",28,null],[13,"Numpad8","","",28,null],[13,"Numpad9","","",28,null],[13,"Multiply","","",28,null],[13,"Add","","",28,null],[13,"Separator","","",28,null],[13,"Subtract","","",28,null],[13,"Decimal","","",28,null],[13,"Divide","","",28,null],[13,"F1","","",28,null],[13,"F2","","",28,null],[13,"F3","","",28,null],[13,"F4","","",28,null],[13,"F5","","",28,null],[13,"F6","","",28,null],[13,"F7","","",28,null],[13,"F8","","",28,null],[13,"F9","","",28,null],[13,"F10","","",28,null],[13,"F11","","",28,null],[13,"F12","","",28,null],[13,"Numlock","","",28,null],[13,"Scroll","","",28,null],[13,"Shift","","",28,null],[13,"Control","","",28,null],[13,"Alt","","",28,null],[13,"Equals","","",28,null],[8,"Editor","","Implemented by plugin editors.",null,null],[10,"size","","Get the size of the editor window.",29,null],[10,"position","","Get the coordinates of the editor window.",29,null],[11,"idle","","Editor idle call. Called by host.",29,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Called when the editor window is closed.",29,{"inputs":[{"name":"self"}],"output":null}],[10,"open","","Called when the editor window is opened. `window` is a platform dependent window pointer (e.g. `HWND` on Windows, `WindowRef` on OSX, `Window` on X11/Linux).",29,null],[10,"is_open","","Return whether the window is currently open.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_knob_mode","","Set the knob mode for this editor (if supported by host).",29,{"inputs":[{"name":"self"},{"name":"knobmode"}],"output":{"name":"bool"}}],[11,"key_up","","Recieve key up event. Return true if the key was used.",29,{"inputs":[{"name":"self"},{"name":"keycode"}],"output":{"name":"bool"}}],[11,"key_down","","Receive key down event. Return true if the key was used.",29,{"inputs":[{"name":"self"},{"name":"keycode"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"keycode"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"knobmode"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",27,{"inputs":[{"name":"i8"}],"output":{"name":"knobmode"}}],[11,"into","","",27,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"from","","",27,{"inputs":[{"name":"i16"}],"output":{"name":"knobmode"}}],[11,"into","","",27,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"from","","",27,{"inputs":[{"name":"i32"}],"output":{"name":"knobmode"}}],[11,"into","","",27,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",27,{"inputs":[{"name":"i64"}],"output":{"name":"knobmode"}}],[11,"into","","",27,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"from","","",27,{"inputs":[{"name":"isize"}],"output":{"name":"knobmode"}}],[11,"into","","",27,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"from","","",27,{"inputs":[{"name":"u8"}],"output":{"name":"knobmode"}}],[11,"into","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from","","",27,{"inputs":[{"name":"u16"}],"output":{"name":"knobmode"}}],[11,"into","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from","","",27,{"inputs":[{"name":"u32"}],"output":{"name":"knobmode"}}],[11,"into","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from","","",27,{"inputs":[{"name":"u64"}],"output":{"name":"knobmode"}}],[11,"into","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from","","",27,{"inputs":[{"name":"usize"}],"output":{"name":"knobmode"}}],[11,"into","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"from","","",28,{"inputs":[{"name":"i8"}],"output":{"name":"key"}}],[11,"into","","",28,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"from","","",28,{"inputs":[{"name":"i16"}],"output":{"name":"key"}}],[11,"into","","",28,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"from","","",28,{"inputs":[{"name":"i32"}],"output":{"name":"key"}}],[11,"into","","",28,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",28,{"inputs":[{"name":"i64"}],"output":{"name":"key"}}],[11,"into","","",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"from","","",28,{"inputs":[{"name":"isize"}],"output":{"name":"key"}}],[11,"into","","",28,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"from","","",28,{"inputs":[{"name":"u8"}],"output":{"name":"key"}}],[11,"into","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from","","",28,{"inputs":[{"name":"u16"}],"output":{"name":"key"}}],[11,"into","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from","","",28,{"inputs":[{"name":"u32"}],"output":{"name":"key"}}],[11,"into","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from","","",28,{"inputs":[{"name":"u64"}],"output":{"name":"key"}}],[11,"into","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from","","",28,{"inputs":[{"name":"usize"}],"output":{"name":"key"}}],[11,"into","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"channels","vst2","Meta data for dealing with input / output channels. Not all hosts use this so it is not necessary for plugin functionality.",null,null],[3,"ChannelInfo","vst2::channels","Information about an input / output channel. This isn't necessary for a channel to function but informs the host how the channel is meant to be used.",null,null],[4,"ArrangementTarget","","Target for Speaker arrangement type. Can be a cinema configuration or music configuration. Both are technically identical but this provides extra information to the host.",null,null],[13,"Music","","Music arrangement. Technically identical to Cinema.",30,null],[13,"Cinema","","Cinematic arrangement. Technically identical to Music.",30,null],[4,"StereoChannel","","An enum for all channels in a stereo configuration.",null,null],[13,"Left","","Left channel.",31,null],[13,"Right","","Right channel.",31,null],[4,"StereoConfig","","Possible stereo speaker configurations.",null,null],[13,"L_R","","Regular.",32,null],[13,"Ls_Rs","","Left surround, right surround.",32,null],[13,"Lc_Rc","","Left center, right center.",32,null],[13,"Sl_Sr","","Side left, side right.",32,null],[13,"C_Lfe","","Center, low frequency effects.",32,null],[4,"SurroundConfig","","Possible surround speaker configurations.",null,null],[13,"S3_0","","3.0 surround sound. Cinema: L R C Music: L R S",33,null],[13,"S3_1","","3.1 surround sound. Cinema: L R C Lfe Music: L R Lfe S",33,null],[13,"S4_0","","4.0 surround sound. Cinema: L R C S (LCRS) Music: L R Ls Rs (Quadro)",33,null],[13,"S4_1","","4.1 surround sound. Cinema: L R C Lfe S (LCRS + Lfe) Music: L R Ls Rs (Quadro + Lfe)",33,null],[13,"S5_0","","5.0 surround sound. Cinema and music: L R C Ls Rs",33,null],[13,"S5_1","","5.1 surround sound. Cinema and music: L R C Lfe Ls Rs",33,null],[13,"S6_0","","6.0 surround sound. Cinema: L R C Ls Rs Cs Music: L R Ls Rs Sl Sr",33,null],[13,"S6_1","","6.1 surround sound. Cinema: L R C Lfe Ls Rs Cs Music: L R Ls Rs Sl Sr",33,null],[13,"S7_0","","7.0 surround sound. Cinema: L R C Ls Rs Lc Rc Music: L R C Ls Rs Sl Sr",33,null],[13,"S7_1","","7.1 surround sound. Cinema: L R C Lfe Ls Rs Lc Rc Music: L R C Lfe Ls Rs Sl Sr",33,null],[13,"S8_0","","8.0 surround sound. Cinema: L R C Ls Rs Lc Rc Cs Music: L R C Ls Rs Cs Sl Sr",33,null],[13,"S8_1","","8.1 surround sound. Cinema: L R C Lfe Ls Rs Lc Rc Cs Music: L R C Lfe Ls Rs Cs Sl Sr",33,null],[13,"S10_2","","10.2 surround sound. Cinema + Music: L R C Lfe Ls Rs Tfl Tfc Tfr Trl Trr Lfe2",33,null],[4,"SpeakerArrangementType","","Type representing how a channel is used. Only useful for some hosts.",null,null],[13,"Custom","","Custom arrangement not specified to host.",34,null],[13,"Empty","","Empty arrangement.",34,null],[13,"Mono","","Mono channel.",34,null],[13,"Stereo","","Stereo channel. Contains type of stereo arrangement and speaker represented.",34,null],[13,"Surround","","Surround channel. Contains surround arrangement and target (cinema or music).",34,null],[11,"new","","Construct a new `ChannelInfo` object.",35,{"inputs":[{"name":"string"},{"name":"option"},{"name":"bool"},{"name":"option"}],"output":{"name":"channelinfo"}}],[11,"into","","Convert to the VST api equivalent of this structure.",35,{"inputs":[{"name":"self"}],"output":{"name":"channelproperties"}}],[11,"from","","",35,{"inputs":[{"name":"channelproperties"}],"output":{"name":"channelinfo"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"speakerarrangementtype"}}],[11,"is_speaker_type","","Determine whether this channel is part of a surround speaker arrangement.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_left_stereo","","Determine whether this channel is the left speaker in a stereo pair.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into","","Convert to VST API arrangement type.",34,{"inputs":[{"name":"self"}],"output":{"name":"speakerarrangementtype"}}],[11,"from","","",34,{"inputs":[{"name":"channelproperties"}],"output":{"name":"speakerarrangementtype"}}],[0,"event","vst2","Interfaces to VST events.",null,null],[3,"MidiEvent","vst2::event","A midi event.",null,null],[12,"data","","The raw midi data associated with this event.",36,null],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",36,null],[12,"live","","This midi event was created live as opposed to being played back in the sequencer.",36,null],[12,"note_length","","The length of the midi note associated with this event, if available.",36,null],[12,"note_offset","","Offset in samples into note from note start, if available.",36,null],[12,"detune","","Detuning between -63 and +64 cents.",36,null],[12,"note_off_velocity","","Note off velocity between 0 and 127.",36,null],[3,"SysExEvent","","A system exclusive event.",null,null],[12,"payload","","The SysEx payload.",37,null],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",37,null],[4,"Event","","A VST event.",null,null],[13,"Midi","","A midi event.",38,null],[13,"SysEx","","A system exclusive event.",38,null],[13,"Deprecated","","A deprecated event.",38,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"midievent"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"sysexevent"}}],[11,"from","","",38,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[0,"host","vst2","Host specific structures.",null,null],[3,"PluginLoader","vst2::host","Wrapper for an externally loaded VST plugin.",null,null],[3,"PluginInstance","","An instance of an externally loaded VST plugin.",null,null],[4,"PluginLoadError","","All possible errors that can occur when loading a VST plugin.",null,null],[13,"InvalidPath","","Could not load given path.",39,null],[13,"NotAPlugin","","Given path is not a VST plugin.",39,null],[13,"InstanceFailed","","Failed to create an instance of this plugin.",39,null],[13,"InvalidApiVersion","","The API version which the plugin used is not supported by this library.",39,null],[8,"Host","","Implemented by all VST hosts.",null,null],[11,"automate","","Automate a parameter; the value has been changed.",40,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"f32"}],"output":null}],[11,"get_plugin_id","","Get the plugin ID of the currently loading plugin.",40,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"idle","","An idle call.",40,{"inputs":[{"name":"self"}],"output":null}],[11,"get_info","","Get vendor and product information.",40,null],[11,"process_events","","Handle incoming events from the plugin.",40,{"inputs":[{"name":"self"},{"name":"events"}],"output":null}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"drop","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"load","","Load a plugin at the given path with the given host.",42,{"inputs":[{"name":"path"},{"name":"arc"}],"output":{"name":"result"}}],[11,"instance","","Try to create an instance of this VST plugin.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_info","","",41,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"init","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"change_preset","","",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_preset_num","","",41,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"set_preset_name","","",41,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"get_preset_name","","",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"string"}}],[11,"get_parameter_label","","",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"string"}}],[11,"get_parameter_text","","",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"string"}}],[11,"get_parameter_name","","",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"string"}}],[11,"get_parameter","","",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"f32"}}],[11,"set_parameter","","",41,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"f32"}],"output":null}],[11,"can_be_automated","","",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"string_to_parameter","","",41,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"string"}],"output":{"name":"bool"}}],[11,"set_sample_rate","","",41,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"set_block_size","","",41,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"resume","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"suspend","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"vendor_specific","","",41,null],[11,"can_do","","",41,{"inputs":[{"name":"self"},{"name":"cando"}],"output":{"name":"supported"}}],[11,"get_tail_size","","",41,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"process","","",41,{"inputs":[{"name":"self"},{"name":"audiobuffer"}],"output":null}],[11,"process_f64","","",41,{"inputs":[{"name":"self"},{"name":"audiobuffer"}],"output":null}],[11,"process_events","","",41,{"inputs":[{"name":"self"},{"name":"events"}],"output":null}],[11,"get_preset_data","","",41,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_bank_data","","",41,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"load_preset_data","","",41,null],[11,"load_bank_data","","",41,null],[11,"get_input_info","","",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"channelinfo"}}],[11,"get_output_info","","",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"channelinfo"}}],[0,"plugin","vst2","Plugin specific structures.",null,null],[3,"Info","vst2::plugin","A structure representing static plugin information.",null,null],[12,"name","","Plugin Name.",43,null],[12,"vendor","","Plugin Vendor.",43,null],[12,"presets","","Number of different presets.",43,null],[12,"parameters","","Number of parameters.",43,null],[12,"inputs","","Number of inputs.",43,null],[12,"outputs","","Number of outputs.",43,null],[12,"unique_id","","Unique plugin ID. Can be registered with Steinberg to prevent conflicts with other plugins.",43,null],[12,"version","","Plugin version (e.g. 0001 = `v0.0.0.1`, 1283 = `v1.2.8.3`).",43,null],[12,"category","","Plugin category. Possible values are found in `enums::PluginCategory`.",43,null],[12,"initial_delay","","Latency of the plugin in samples.",43,null],[12,"preset_chunks","","Indicates that preset data is handled in formatless chunks.",43,null],[12,"f64_precision","","Indicates whether this plugin can process f64 based `AudioBuffer` buffers.",43,null],[12,"silent_when_stopped","","If this is true, the plugin will not produce sound when the input is silence.",43,null],[3,"HostCallback","","A reference to the host which allows the plugin to call back and access information.",null,null],[4,"Category","","Plugin type. Generally either Effect or Synth.",null,null],[13,"Unknown","","Unknown / not implemented",44,null],[13,"Effect","","Any effect",44,null],[13,"Synth","","VST instrument",44,null],[13,"Analysis","","Scope, tuner, spectrum analyser, etc.",44,null],[13,"Mastering","","Dynamics, etc.",44,null],[13,"Spacializer","","Panners, etc.",44,null],[13,"RoomFx","","Delays and Reverbs",44,null],[13,"SurroundFx","","Dedicated surround processor.",44,null],[13,"Restoration","","Denoiser, etc.",44,null],[13,"OfflineProcess","","Offline processing.",44,null],[13,"Shell","","Contains other plugins.",44,null],[13,"Generator","","Tone generator, etc.",44,null],[4,"CanDo","","Features which are optionally supported by a plugin. These are queried by the host at run time.",null,null],[13,"SendEvents","","",45,null],[13,"SendMidiEvent","","",45,null],[13,"ReceiveEvents","","",45,null],[13,"ReceiveMidiEvent","","",45,null],[13,"ReceiveTimeInfo","","",45,null],[13,"Offline","","",45,null],[13,"MidiProgramNames","","",45,null],[13,"Bypass","","",45,null],[13,"ReceiveSysExEvent","","",45,null],[13,"MidiSingleNoteTuningChange","","",45,null],[13,"MidiKeyBasedInstrumentControl","","",45,null],[13,"Other","","",45,null],[8,"Plugin","","Must be implemented by all VST plugins.",null,null],[10,"get_info","","This method must return an `Info` struct.",46,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"new","","Called during initialization to pass a `HostCallback` to the plugin.",46,{"inputs":[{"name":"hostcallback"}],"output":{"name":"self"}}],[11,"init","","Called when plugin is fully initialized.",46,{"inputs":[{"name":"self"}],"output":null}],[11,"change_preset","","Set the current preset to the index specified by `preset`.",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_preset_num","","Get the current preset index.",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"set_preset_name","","Set the current preset name.",46,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"get_preset_name","","Get the name of the preset at the index specified by `preset`.",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"string"}}],[11,"get_parameter_label","","Get parameter label for parameter at `index` (e.g. \"db\", \"sec\", \"ms\", \"%\").",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"string"}}],[11,"get_parameter_text","","Get the parameter value for parameter at `index` (e.g. \"1.0\", \"150\", \"Plate\", \"Off\").",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"string"}}],[11,"get_parameter_name","","Get the name of parameter at `index`.",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"string"}}],[11,"get_parameter","","Get the value of paramater at `index`. Should be value between 0.0 and 1.0.",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"f32"}}],[11,"set_parameter","","Set the value of parameter at `index`. `value` is between 0.0 and 1.0.",46,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"f32"}],"output":null}],[11,"can_be_automated","","Return whether parameter at `index` can be automated.",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"string_to_parameter","","Use String as input for parameter value. Used by host to provide an editable field to adjust a parameter value. E.g. \"100\" may be interpreted as 100hz for parameter. Returns if the input string was used.",46,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"string"}],"output":{"name":"bool"}}],[11,"set_sample_rate","","Called when sample rate is changed by host.",46,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"set_block_size","","Called when block size is changed by host.",46,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"resume","","Called when plugin is turned on.",46,{"inputs":[{"name":"self"}],"output":null}],[11,"suspend","","Called when plugin is turned off.",46,{"inputs":[{"name":"self"}],"output":null}],[11,"vendor_specific","","Vendor specific handling.",46,null],[11,"can_do","","Return whether plugin supports specified action.",46,{"inputs":[{"name":"self"},{"name":"cando"}],"output":{"name":"supported"}}],[11,"get_tail_size","","Get the tail size of plugin when it is stopped. Used in offline processing as well.",46,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"process","","Process an audio buffer containing `f32` values.",46,{"inputs":[{"name":"self"},{"name":"audiobuffer"}],"output":null}],[11,"process_f64","","Process an audio buffer containing `f64` values.",46,{"inputs":[{"name":"self"},{"name":"audiobuffer"}],"output":null}],[11,"process_events","","Handle incoming events sent from the host.",46,{"inputs":[{"name":"self"},{"name":"events"}],"output":null}],[11,"get_editor","","Return handle to plugin editor if supported.",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_preset_data","","If `preset_chunks` is set to true in plugin info, this should return the raw chunk data for the current preset.",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_bank_data","","If `preset_chunks` is set to true in plugin info, this should return the raw chunk data for the current plugin bank.",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"load_preset_data","","If `preset_chunks` is set to true in plugin info, this should load a preset from the given chunk data.",46,null],[11,"load_bank_data","","If `preset_chunks` is set to true in plugin info, this should load a preset bank from the given chunk data.",46,null],[11,"get_input_info","","Get information about an input channel. Only used by some hosts.",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"channelinfo"}}],[11,"get_output_info","","Get information about an output channel. Only used by some hosts.",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"channelinfo"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",44,{"inputs":[{"name":"i8"}],"output":{"name":"category"}}],[11,"into","","",44,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"from","","",44,{"inputs":[{"name":"i16"}],"output":{"name":"category"}}],[11,"into","","",44,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"from","","",44,{"inputs":[{"name":"i32"}],"output":{"name":"category"}}],[11,"into","","",44,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",44,{"inputs":[{"name":"i64"}],"output":{"name":"category"}}],[11,"into","","",44,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"from","","",44,{"inputs":[{"name":"isize"}],"output":{"name":"category"}}],[11,"into","","",44,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"from","","",44,{"inputs":[{"name":"u8"}],"output":{"name":"category"}}],[11,"into","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from","","",44,{"inputs":[{"name":"u16"}],"output":{"name":"category"}}],[11,"into","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from","","",44,{"inputs":[{"name":"u32"}],"output":{"name":"category"}}],[11,"into","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from","","",44,{"inputs":[{"name":"u64"}],"output":{"name":"category"}}],[11,"into","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from","","",44,{"inputs":[{"name":"usize"}],"output":{"name":"category"}}],[11,"into","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"info"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",45,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into","","",45,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"hostcallback"}}],[11,"vst_version","","Get the VST API version supported by the host e.g. `2400 = VST 2.4`.",47,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"automate","","",47,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"f32"}],"output":null}],[11,"get_plugin_id","","",47,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"idle","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"get_info","","",47,null],[11,"process_events","","Send events to the host.",47,{"inputs":[{"name":"self"},{"name":"events"}],"output":null}],[14,"plugin_main","vst2","Exports the necessary symbols for the plugin to be used by a VST host.",null,null]],"paths":[[3,"AudioBuffer"],[3,"Inputs"],[3,"InputIterator"],[3,"Outputs"],[3,"OutputIterator"],[3,"SendEventBuffer"],[3,"AEffect"],[3,"ChannelProperties"],[3,"FileType"],[3,"FileSelect"],[3,"Events"],[3,"Event"],[3,"MidiEvent"],[3,"SysExEvent"],[4,"SpeakerArrangementType"],[4,"Supported"],[4,"ProcessLevel"],[4,"HostLanguage"],[4,"FileSelectCommand"],[4,"FileSelectType"],[4,"EventType"],[3,"Channel"],[3,"Plugin"],[3,"ModifierKey"],[3,"MidiEvent"],[3,"EventIterator"],[3,"KeyCode"],[4,"KnobMode"],[4,"Key"],[8,"Editor"],[4,"ArrangementTarget"],[4,"StereoChannel"],[4,"StereoConfig"],[4,"SurroundConfig"],[4,"SpeakerArrangementType"],[3,"ChannelInfo"],[3,"MidiEvent"],[3,"SysExEvent"],[4,"Event"],[4,"PluginLoadError"],[8,"Host"],[3,"PluginInstance"],[3,"PluginLoader"],[3,"Info"],[4,"Category"],[4,"CanDo"],[8,"Plugin"],[3,"HostCallback"]]};
initSearch(searchIndex);
